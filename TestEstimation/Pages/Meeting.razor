@page "/meeting"
@inject Data.MeetingDetails meetings
@using Microsoft.JSInterop
@inject IJSRuntime JS
<div class="container-fluid">
    <form class="needs-validation" novalidate>
        <div class="mb-3">
            <label class="form-label" for="userID">User ID :</label>
            <input class="form-control" id="userID" type="text" @bind-value="userID" required />
        </div>
        <div class="mb-3">
            <label class="form-label" for="desc">Description :</label>
            <input class="form-control" id="desc" type="text" @bind-value="description" required />
            @*<ValidationMessage For="@(() => description)" />*@
        </div>
        <div class="mb-3">
            <button class="btn btn-primary" data-bs-toggle="button" type="button" @onclick="CreateMeeting">Create Meeting</button>
        </div>
    </form>
    <div class="input-group mb-3">
        <label for="currentMeetingID" class="form-label input-group-text">Current Meeting ID:</label>
        <input class="form-control form-control-plaintext" id="currentMeetingID" type="text" @bind-value="meetingID" disabled />
    </div>
</div>

@if (meetingList.Any())
{
    <table class="table table-striped table-hover table-borderless table-responsive-sm">
        <caption style="caption-side:top;">List of meetings</caption>
        <thead>
            <tr>
                <th scope="col">Meeting ID</th>
                <th scope="col">Created By</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var meet in meetingList)
            {
                <tr>
                    <td>@meet.MeetingId</td>
                    <td>@meet.Creator</td>
                    <td>@meet.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string meetingID = String.Empty;
    private string userID = String.Empty;
    private string description = String.Empty;
    private List<EstimationModels.Meeting> meetingList = new List<EstimationModels.Meeting>();
    EstimationModels.Meeting meeting = new EstimationModels.Meeting();
    private async Task CreateMeeting()
    {
        meetingID = Guid.NewGuid().ToString();
        meeting.Creator = userID;
        meeting.Description = description;
        meeting.MeetingId = meetingID;
        meetings.CreateMeeting(meeting);
        SaveMeetingIDToCookies();
        meetingList = await meetings.GetMeetingsAsync();
        meetingID = await GetMeetingIDFromCookies();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        meetingList = await meetings.GetMeetingsAsync();
    }
    private async void SaveMeetingIDToCookies()
    {
        await JS.InvokeVoidAsync("SaveCookie", meetingID);
    }
    private async Task<string> GetMeetingIDFromCookies()
    {
        return await JS.InvokeAsync<string>("GetCookie");
    }
}
