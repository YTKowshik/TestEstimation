@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.JSInterop
@inject IJSRuntime JS


<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<div class="form-group">
    <input type="checkbox" id="isAdmin" @bind="isAdmin" />
    <input type="text" style="display:none;" @bind="hTest" />
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>
<ul id="messagesList">
    @foreach (var message in messages)
    {
    <li>@message</li>
    }
</ul>
<div id="dialog" class="show-dialog">
    @*<EstimatePopUp></EstimatePopUp>*@
</div>
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private Boolean isAdmin;
    private static string hTest = "";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/popupHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
            if (!isAdmin) { ShowAlert(); }
        });

        await hubConnection.StartAsync();
        
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    [JSInvokable]
    public static void SayHelloCS(string name)
    {
        hTest= "Hello, " + name;
    }
    public async void ShowAlert()
    {
        await JS.InvokeVoidAsync("JSAlert");
    }
}